// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider          = "postgresql"
//   url               = env("POSTGRES_PRISMA_URL")
// }

// model Account {
//   id                       String  @id @default(cuid())
//   userId                   String
//   type                     String
//   provider                 String
//   providerAccountId        String
//   refresh_token            String?
//   access_token             String?
//   expires_at               Int?
//   token_type               String?
//   scope                    String?
//   id_token                 String?
//   session_state            String?
//   refresh_token_expires_in Int?
//   user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  // accounts      Account[]
  // sessions      Session[]
}

// model Follows {
//   followerId  String
//   followingId String
//   follower    User   @relation("follower", fields: [followerId], references: [id])
//   following   User   @relation("following", fields: [followingId], references: [id])

//   @@id([followerId, followingId])
// }

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}